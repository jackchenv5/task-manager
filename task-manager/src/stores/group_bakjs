import { ref } from 'vue'
import { defineStore } from 'pinia'
import { useUserStore } from '@/stores/user'
import { getFisrtAndLastDayOfMonth } from '@/utils/public'
import { getTaskDataApi, getUserGroupApi, taskPublishApi, taskModifyApi } from '@/api/data/data'
import { storeToRefs } from 'pinia'
const myUserStore = useUserStore()
const { loginUser } = storeToRefs(myUserStore)
export const useGroupStore = defineStore('group', () => {
  const allTask = ref([])
  const allGroup = ref([])
  const groupCfg = ref({})
  const  getAllTask = async (groupID,startDate,endDate) => {
    // 登陆逻辑完成后， 用户登陆后就可以获取用户组ID
    let params = {}
    const group = groupID ? groupID : loginUser.value.group
    if (startDate === undefined && endDate === undefined) {
      const [start,end] = getFisrtAndLastDayOfMonth()
       params = {'group': group, 'start_time': start, 'deadline_time': end}
    }else {
       params = {'group': group, 'start_time': startDate, 'deadline_time': endDate}
    }
    // 根据用户id和起止时间获取后端的数据
    console.log('params=============================>',params)
    const response = await getTaskDataApi(params)
    let groupTasks = []
    response.result.items.forEach(e => {
        e.start_date = e.start_time
        e.end_date = e.deadline_time
        if (e.progress === null) {
          e.progress = '0'
        }
        groupTasks.push(e)
    })
    allTask.value = groupTasks
  };
  
  const  getAllGroup = async () => {
    // 获取所有组员信息数据
    const params = {}
    const response = await getUserGroupApi(params)
    allGroup.value = response.result.items
  }

  const getGroupCfg = async () => {
    // 获取用户组配置信息
    groupCfg.value = myUserStore.getUserConfig("group") ? myUserStore.getUserConfig("group") : {}
    if (!groupCfg.value.hasOwnProperty('selectedGroupId')) {
      groupCfg.value['selectedGroupId'] = myUserStore.loginUser.group
    }
    if (!groupCfg.value.hasOwnProperty('selectedStatus')) {
      groupCfg.value['selectedStatus'] = 'all'
    }

  }

  const setGroupCfg = (key, value) => {
    groupCfg.value[key] = value
    myUserStore.setUserConfig("group", groupCfg.value)
  }
  const dispatchTask = async (params) => {
    const res = await taskPublishApi(params)
    return res
  }
  
  const uploadAllChange = async (changeIndexs) => {
    
    const promises = changeIndexs.map(async (index) => {
      const newTask = allTask.value[index];
      const params = {start_time: newTask.start_date, deadline_time: newTask.end_date};
      
      try {
        const res = await taskModifyApi(newTask.id, params)
        return { success: true, name: newTask.name }
      } catch (error) {
        return { success: false, name: newTask.name, error }
      }
    });
    
    const results = await Promise.all(promises);
    const failMsg = results
      .filter(r => !r.success)
      .map(r => `任务 ${r.name} 更新失败: ${r.error.message}`)
      .join('\n')
    return failMsg
  }

  return { allTask, allGroup, groupCfg, getAllTask, dispatchTask, getAllGroup, getGroupCfg, setGroupCfg, uploadAllChange }
})